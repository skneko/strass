mod SEMAPHORE-NT is
    protecting NAT .
    protecting BOOL .

    --- Type declarations for processes
    sorts Process PState .

    --- A process has an identifier and status
    op p_{_} : Nat PState -> Process .

    --- There are four possible states
    ops idle entering critical exiting : -> PState .

    --- We put all processes together in a set
    sort PSet .
    subsort Process < PSet .
    op empty : -> PSet .
    op __ : PSet PSet -> PSet [assoc comm id: empty] .
    eq X:Process X:Process = X:Process . --- Propiedad idempotencia

    --- We define the semaphore type
    sort Semaphore .
    subsort Bool < Semaphore .

    --- We put all the processes together with a semaphore to share, 
    --- which defines the overall situation of our entire system
    sort GlobalState .
    op _||_||_ : Semaphore Nat PSet -> GlobalState .

    --- Variables
    var S : Semaphore . var PS : PSet . vars Id Step : Nat .

    --- We now give the rules that define the behavior of each process
    rl [keep_idle] : S || Step || p Id {idle} PS => S || Step || p Id {idle} PS .
    rl [entering] : S || Step || p Id {idle} PS => S || Step || p Id {entering} PS .
    rl [critical] : false || Step || p Id {entering} PS => true || Step || p Id {critical} PS .
    rl [exiting] : S || Step || p Id {critical} PS => S || Step + 1 || p Id {exiting} PS .
    rl [to_idle] : S || Step || p Id {exiting} PS => false || Step || p Id {idle} PS .
endm


***(
	Generated by STRASS -- safe-tools.dsic.upv.es/strass
)

--- Notice: extended by STRASS, not the original definition
fmod EMPTY is
	including BOOL .
	protecting EXT-BOOL .
endfm

smod SEMAPHORE-NT-SAFE is
	protecting SEMAPHORE-NT .
	protecting EMPTY .
	strat GlobalState! : @ GlobalState .
	strat GlobalState* : @ GlobalState .
	strat GlobalState+ : @ GlobalState .
	strat GlobalState-state : @ GlobalState .
	strat PSet! : @ PSet .
	strat PSet* : @ PSet .
	strat PSet+ : @ PSet .
	strat PSet-state : @ PSet .
	strat PState! : @ PState .
	strat PState* : @ PState .
	strat PState+ : @ PState .
	strat PState-state : @ PState .
	strat Semaphore! : @ Semaphore .
	strat Semaphore* : @ Semaphore .
	strat Semaphore+ : @ Semaphore .
	strat Semaphore-state : @ Semaphore .
	strat s1 : @ PSet .
	strat s2 : @ GlobalState .
	strat s3 : @ Process .
	strat s4 : @ GlobalState .
	sd GlobalState! := (GlobalState-state) ; (((all) ; (GlobalState-state)) !) .
	sd GlobalState* := (GlobalState-state) ; (((all) ; (GlobalState-state)) *) .
	sd GlobalState+ := (GlobalState-state) ; (((all) ; (GlobalState-state)) +) .
	sd GlobalState-state := (s2) ; ((s4) ; ((s1) ; (s3))) .
	sd PSet! := (PSet-state) ; (((all) ; (PSet-state)) !) .
	sd PSet* := (PSet-state) ; (((all) ; (PSet-state)) *) .
	sd PSet+ := (PSet-state) ; (((all) ; (PSet-state)) +) .
	sd PSet-state := (s1) ; (s3) .
	sd PState! := (all) ! .
	sd PState* := (all) * .
	sd PState+ := (all) + .
	sd PState-state := idle .
	sd Semaphore! := (all) ! .
	sd Semaphore* := (all) * .
	sd Semaphore+ := (all) + .
	sd Semaphore-state := idle .
	sd s1 := not(amatch p N:Nat{PS:PState} p N:Nat{PS':PState} s.t. false = false) .
	sd s2 := not(amatch B:Bool || N:Nat || p N:Nat{critical} p M:Nat{critical} s.t. false = false) .
	sd s3 := not(amatch p N:Nat{idle} s.t. N:Nat > 0 = false) .
	sd s4 := not(amatch false || N:Nat || p N:Nat{entering} PS:PSet s.t. true = false) .
endsm
