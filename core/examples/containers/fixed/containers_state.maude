mod CONTAINERS is 
   pr INT + EXT-BOOL .

   sorts Container Cargo Ship Fleet State .
   subsort Container < Cargo .
   subsort Ship < Fleet .
    
   op c : Int -> Container [ctor] .
   op <_,_|_> : Int Int Cargo -> Ship [ctor] .
   op _:_ : Fleet Cargo -> State .
   ops weight size : Cargo -> Int .
   op isFull : Cargo -> Bool .
   op maxW : -> Int .

   op none : -> Fleet .
   op __ : Fleet Fleet -> Fleet [ctor assoc comm id: none] .
        
   op nil : -> Cargo .
   op _,_ : Cargo Cargo -> Cargo [ctor assoc id: nil] .
      
   vars W MAXW MAXS : Int .
   vars CG CG1 CG2 : Cargo .
   var FL : Fleet .
   
   eq weight(nil) = 0 .
   eq weight(c(W),CG) = W + weight(CG) .
  
   eq size(nil) = 0 .
   eq size(c(W),CG) = 1 + size(CG) .
   
   eq maxW = 5 .
   
   eq isFull(nil) = true .
   eq isFull(c(W) , CG) = (W == maxW) and isFull(CG) .
   
   crl [stow] : < MAXW , MAXS | CG > FL : c(W) , CG1 => 
                < MAXW , MAXS | CG,c(W) > FL : CG1
                if weight(CG,c(W)) <= MAXW .

   rl [unstow] : < MAXW , MAXS | c(W) , CG > FL : CG1 => 
                 < MAXW , MAXS | CG > FL : CG1 , c(W) .

   crl [load] : < MAXW , MAXS | CG > FL : CG1 , c(W) , CG2 => 
                < MAXW , MAXS | CG > FL : CG1 , c(W + 1) , CG2 
                if not(isFull(c(W))) .

   rl [unload] : < MAXW , MAXS | CG > FL : CG1 , c(W) , CG2 => 
                 < MAXW , MAXS | CG > FL : CG1 , c(W - 1), CG2 .
endm


***(
	Generated by STRASS -- safe-tools.dsic.upv.es/strass
)

--- Notice: extended by STRASS, not the original definition
fmod EMPTY is
	including BOOL .
	protecting EXT-BOOL .
endfm

smod CONTAINERS-FIXED is
	protecting CONTAINERS .
	protecting EMPTY .
	strat Cargo : @ Cargo .
	strat Cargo! : @ Cargo .
	strat Cargo* : @ Cargo .
	strat Cargo+ : @ Cargo .
	strat Fleet : @ Fleet .
	strat Fleet! : @ Fleet .
	strat Fleet* : @ Fleet .
	strat Fleet+ : @ Fleet .
	strat State : @ State .
	strat State! : @ State .
	strat State* : @ State .
	strat State+ : @ State .
	strat s1 : @ Container .
	strat s2 : @ Ship .
	strat s3 : @ Cargo .
	strat s4 : @ Ship .
	sd Cargo := (s3) ; (s1) .
	sd Cargo! := (Cargo) ; (((all) ; (Cargo)) !) .
	sd Cargo* := (Cargo) ; (((all) ; (Cargo)) *) .
	sd Cargo+ := (Cargo) ; (((all) ; (Cargo)) +) .
	sd Fleet := (s3) ; ((s2) ; (s4)) .
	sd Fleet! := (Fleet) ; (((all) ; (Fleet)) !) .
	sd Fleet* := (Fleet) ; (((all) ; (Fleet)) *) .
	sd Fleet+ := (Fleet) ; (((all) ; (Fleet)) +) .
	sd State := (s3) ; ((s1) ; ((s2) ; (s4))) .
	sd State! := (State) ; (((all) ; (State)) !) .
	sd State* := (State) ; (((all) ; (State)) *) .
	sd State+ := (State) ; (((all) ; (State)) +) .
	sd s1 := not(amatch c(W:Int) s.t. W:Int >= 0 and W:Int <= 5 = false) .
	sd s2 := not(amatch < MAXW:Int, MAXS:Int | CG:Cargo > s.t. weight(CG:Cargo) <= MAXW:Int and size(CG:Cargo) <= MAXS:Int = false) .
	sd s3 := not(amatch CG1:Cargo, c(W:Int), CG2:Cargo s.t. isFull(c(W:Int)) implies isFull(CG1:Cargo) = false) .
	sd s4 := not(amatch < MAXW1:Int, MAXS1:Int | c(W1:Int), c(W1':Int) > s.t. W1:Int >= 0 and W1:Int <= 5 = false) .
endsm
