--- Just a simple nondeterministic dam controller

--- Rationals are needed to model basin water volume and 
--- its related parameters (e.g., inflow, outflow)
mod DAM-NOCMD is
    protecting RAT . 

    sorts SpillwayId Aperture Spillway Spillways DamState TimeStamp .
    subsort Spillway < Spillways .
    subsort Nat < TimeStamp . --- we consider a Discrete time domain modeled by the set of natural numbers.
    sort State .

    --- We assume our dam is provided with three spillways called s1, s2 and s3 
    --- (albeit this code can work with an arbitrary number of spillways provided their IDs are declared below)
    ops s1 s2 s3 : -> SpillwayId [ctor] .

    --- We consider 4 kinds of spillway openings of increasing discharge capacity
    ops close open1 open2 open3 : -> Aperture [ctor] .

    --- A spillway is a pair (spillwayId,aperture).
    op `[_`,_`] : SpillwayId Aperture -> Spillway [ctor] .

    --- We consider a multiset of spillways with identity empty (that is, empty represents an empty multiset of spillways)
    op empty : -> Spillways [ctor] . 
    op __ : Spillways Spillways -> Spillways [ctor assoc comm id: empty] .

    vars T T1 T2 : TimeStamp .

    --- This operator checks whether a given time stamp falls in a given time interval 
    --- op _ in[_`,_`] : TimeStamp TimeStamp TimeStamp -> Bool .
    op _ in [_`,_`] : TimeStamp TimeStamp TimeStamp -> Bool .
    eq T in [T1,T2] = T >= T1 and T <= T2 .

    --- A term of sort State is a triple [spillways, volume, timestamp] where spillways is a multiset 
    --- of spillways and volume is the basin volume at the time instant timetamp.
    op `{_;_;_`} : Spillways Rat TimeStamp -> State .  

    var S : SpillwayId .
    vars O1 O2 O3 : Aperture .
    vars V V' H : Rat .
    var SC : Spillways .
    var B : Bool .

    --- The following rules changes the opening configuration of a given spillway.
    --- Note that these rules are instantaneous and thus do not change the basin volume. 
    --- We consider the following aperture commands:
    ---    * open
    ---    * close
    --- The aperture command open (resp. close) defines
    --- an increasing (resp. decreasing) spillway discharge capacity policy. 
        
    rl [openC-1] : { [S,close] SC ; V ; T } => { [S,open1] SC ; V ; T } .
    rl [open1-2] : { [S,open1] SC ; V ; T } => { [S,open2] SC ; V ; T } .
    rl [open2-3] : { [S,open2] SC ; V ; T } => { [S,open3] SC ; V ; T } .

    rl [close1-C] : { [S, open1] SC ; V ; T } => { [S,close] SC ; V ; T } .
    rl [close2-1] : { [S, open2] SC ; V ; T } => { [S,open1] SC ; V ; T } .
    rl [close3-2] : { [S, open3] SC ; V ; T } => { [S,open2] SC ; V ; T } .

    --- Constant operator deltaT defines the time interval between two aperture commands.
    --- (Note: in "A Practical use of model checking for synthesis: generating a dam controller for flood management", this value is called d_cmd.)
    op deltaT : -> TimeStamp .
    eq deltaT = 5 .

    --- We assume that the environmental inflow has a constant rate of 2000 m^3/min.
    op inflow : -> Rat . 
    eq inflow = 2000 .

    --- Spillway outflow depends on its opening position (aperture).
    op aperture : Aperture -> Rat .
    eq aperture(close) = 0 .
    eq aperture(open1) = 200 .
    eq aperture(open2) = 400 .
    eq aperture(open3) = 1200 .

    var O : Aperture .  

    --- Spillway outflow computation can be lifted to outflow of multisets of spillways. 
    op outflow : Spillways -> Rat .
    eq outflow(empty) = 0 .
    eq outflow([S,O] SC) = aperture(O) + outflow(SC) .

    --- The volume rule models the basin volume variation in time interval [T,T+deltaT] depending on the outflow of the spillways and the inflow capacity.
    --- Assumption: 1 time unit corresponds to 1 minute.
    --- Note that the application of volume is in mutal exclusion with the application of 
    --- any close/open rule. In other words, the open/close rules and the volume rule cannot be applied concurrently: 
    --- either an aperture command is executed or the basin volume modification w.r.t. the current spillways 
    --- configuration is observed.
    --- This is enforced in the next step by specifying a path assertion.
    crl [volume] :  { SC ; V ; T } => { SC ; V' ; (T + deltaT) }  
                                    if V' := (V + inflow * deltaT) - (outflow(SC) * deltaT) .
endm

***(
	Generated by STRASS -- safe-tools.dsic.upv.es/strass
)

--- Notice: extended by STRASS, not the original definition
mod DAM-PRED is
	protecting DAM-NOCMD .
	including BOOL .
	protecting EXT-BOOL .
	op openSpillways : Spillways -> Nat .
	eq openSpillways(empty) = 0 .
	eq openSpillways(SC:Spillways[S:SpillwayId, O:Aperture]) = if O:Aperture =/= close then 1 + openSpillways(SC:Spillways) else openSpillways(SC:Spillways) fi .
endm

smod DAM-NOCMD-SAFE is
	protecting DAM-NOCMD .
	protecting DAM-PRED .
	including BOOL .
	protecting EXT-BOOL .
	strat Aperture! : @ Aperture .
	strat Aperture* : @ Aperture .
	strat Aperture+ : @ Aperture .
	strat Aperture-state : @ Aperture .
	strat DamState! : @ DamState .
	strat DamState* : @ DamState .
	strat DamState+ : @ DamState .
	strat DamState-state : @ DamState .
	strat SpillwayId! : @ SpillwayId .
	strat SpillwayId* : @ SpillwayId .
	strat SpillwayId+ : @ SpillwayId .
	strat SpillwayId-state : @ SpillwayId .
	strat Spillways! : @ Spillways .
	strat Spillways* : @ Spillways .
	strat Spillways+ : @ Spillways .
	strat Spillways-state : @ Spillways .
	strat State! : @ State .
	strat State* : @ State .
	strat State+ : @ State .
	strat State-path : @ State .
	strat State-state : @ State .
	strat TimeStamp! : @ TimeStamp .
	strat TimeStamp* : @ TimeStamp .
	strat TimeStamp+ : @ TimeStamp .
	strat TimeStamp-state : @ TimeStamp .
	strat s2 : @ State .
	strat s3 : @ State .
	strat s4 : @ State .
	strat s5 : @ State .
	sd Aperture! := (all) ! .
	sd Aperture* := (all) * .
	sd Aperture+ := (all) + .
	sd Aperture-state := idle .
	sd DamState! := (all) ! .
	sd DamState* := (all) * .
	sd DamState+ := (all) + .
	sd DamState-state := idle .
	sd SpillwayId! := (all) ! .
	sd SpillwayId* := (all) * .
	sd SpillwayId+ := (all) + .
	sd SpillwayId-state := idle .
	sd Spillways! := (all) ! .
	sd Spillways* := (all) * .
	sd Spillways+ := (all) + .
	sd Spillways-state := idle .
	sd State! := (State-state) ; ((State-path) ; (((all) ; (State-path)) !)) .
	sd State* := (State-state) ; ((State-path) ; (((all) ; (State-path)) *)) .
	sd State+ := (State-state) ; ((State-path) ; (((all) ; (State-path)) +)) .
	sd State-path := (((close1-C) ; (State-state)) | ((close2-1) ; (State-state)) | ((close3-2) ; (State-state)) | ((open1-2) ; (State-state)) | ((open2-3) ; (State-state)) | (openC-1) ; (State-state)) ; ((volume) ; (State-state)) .
	sd State-state := (s2) ; ((s3) ; ((s4) ; (s5))) .
	sd TimeStamp! := (all) ! .
	sd TimeStamp* := (all) * .
	sd TimeStamp+ := (all) + .
	sd TimeStamp-state := idle .
	sd s2 := not(amatch {SC:Spillways ; V:Rat ; T:TimeStamp} s.t. V:Rat < 50000000 = false) .
	sd s3 := not(amatch {[S1:SpillwayId, O1:Aperture][S2:SpillwayId, O2:Aperture][S3:SpillwayId, O3:Aperture] ; V:Rat ; T:TimeStamp} s.t. V:Rat > 40000000 implies O1:Aperture == open3 and O2:Aperture =/= close and O3:Aperture =/= close or O2:Aperture == open3 and O1:Aperture =/= close and O3:Aperture =/= close or O3:Aperture == open3 and O1:Aperture =/= close and O2:Aperture =/= close = false) .
	sd s4 := not(amatch {SC:Spillways ; V:Rat ; T:TimeStamp} s.t. V:Rat < 10000000 implies openSpillways(SC:Spillways) == 0 = false) .
	sd s5 := not(amatch {SC:Spillways ; V:Rat ; T:TimeStamp} s.t. V:Rat >= 10000000 and V:Rat <= 40000000 implies openSpillways(SC:Spillways) == 2 = false) .
endsm
