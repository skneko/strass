mod DAM-NOCMD is
  protecting RAT . 
  
  sorts SpillwayId Aperture Spillway Spillways DamState TimeStamp .
  subsort Spillway < Spillways .
  subsort Nat < TimeStamp .
  sort State .
  
  ops s1 s2 s3 : -> SpillwayId [ctor] .
  ops close open1 open2 open3 : -> Aperture [ctor] .
  op `[_`,_`] : SpillwayId Aperture -> Spillway [ctor] .
  
  op empty : -> Spillways [ctor] . 
  op __ : Spillways Spillways -> Spillways [ctor assoc comm id: empty] .
  
  vars T T1 T2 : TimeStamp .
  
  op _ in [_`,_`] : TimeStamp TimeStamp TimeStamp -> Bool .
  eq T in [T1,T2] = T >= T1 and T <= T2 .
  
  op `{_;_;_`} : Spillways Rat TimeStamp -> State .  
 
  var S : SpillwayId .
  vars O1 O2 O3 : Aperture .
  vars V V' H : Rat .
  var SC : Spillways .
  var B : Bool .
      
  rl [openC-1] : { [S,close] SC ; V ; T } => { [S,open1] SC ; V ; T } .
  rl [open1-2] : { [S,open1] SC ; V ; T } => { [S,open2] SC ; V ; T } .
  rl [open2-3] : { [S,open2] SC ; V ; T } => { [S,open3] SC ; V ; T } .
  
  rl [close1-C] : { [S, open1] SC ; V ; T } => { [S,close] SC ; V ; T } .
  rl [close2-1] : { [S, open2] SC ; V ; T } => { [S,open1] SC ; V ; T } .
  rl [close3-2] : { [S, open3] SC ; V ; T } => { [S,open2] SC ; V ; T } .
  
  op deltaT : -> TimeStamp .
  eq deltaT = 5 .
  
  op inflow : -> Rat . 
  eq inflow = 2000 .
  
  op aperture : Aperture -> Rat .
  eq aperture(close) = 0 .
  eq aperture(open1) = 200 .
  eq aperture(open2) = 400 .
  eq aperture(open3) = 1200 .
  
  var O : Aperture .  
  
  op outflow : Spillways -> Rat .
  eq outflow(empty) = 0 .
  eq outflow([S,O] SC) = aperture(O) + outflow(SC) .
 
  crl [volume] :  { SC ; V ; T } => { SC ; V' ; (T + deltaT) }  
                                  if V' := (V + inflow * deltaT) - (outflow(SC) * deltaT) .
endm

***(
	Generated by STRASS -- safe-tools.dsic.upv.es/strass
)

--- Notice: extended by STRASS, not the original definition
mod DAM-PRED is
	protecting DAM-NOCMD .
	including BOOL .
	protecting EXT-BOOL .
	op openSpillways : Spillways -> Nat .
	eq openSpillways(empty) = 0 .
	eq openSpillways(SC:Spillways[S:SpillwayId, O:Aperture]) = if O:Aperture =/= close then 1 + openSpillways(SC:Spillways) else openSpillways(SC:Spillways) fi .
endm

smod DAM-NOCMD-FIXED is
	protecting DAM-NOCMD .
	protecting DAM-PRED .
	strat Aperture : @ Aperture .
	strat Aperture! : @ Aperture .
	strat Aperture* : @ Aperture .
	strat Aperture+ : @ Aperture .
	strat DamState : @ DamState .
	strat DamState! : @ DamState .
	strat DamState* : @ DamState .
	strat DamState+ : @ DamState .
	strat SpillwayId : @ SpillwayId .
	strat SpillwayId! : @ SpillwayId .
	strat SpillwayId* : @ SpillwayId .
	strat SpillwayId+ : @ SpillwayId .
	strat Spillways : @ Spillways .
	strat Spillways! : @ Spillways .
	strat Spillways* : @ Spillways .
	strat Spillways+ : @ Spillways .
	strat State : @ State .
	strat State! : @ State .
	strat State* : @ State .
	strat State+ : @ State .
	strat State-state : @ State .
	strat TimeStamp : @ TimeStamp .
	strat TimeStamp! : @ TimeStamp .
	strat TimeStamp* : @ TimeStamp .
	strat TimeStamp+ : @ TimeStamp .
	strat s2 : @ State .
	strat s3 : @ State .
	strat s4 : @ State .
	strat s5 : @ State .
	sd Aperture := idle .
	sd Aperture! := (all) ! .
	sd Aperture* := (all) * .
	sd Aperture+ := (all) + .
	sd DamState := idle .
	sd DamState! := (all) ! .
	sd DamState* := (all) * .
	sd DamState+ := (all) + .
	sd SpillwayId := idle .
	sd SpillwayId! := (all) ! .
	sd SpillwayId* := (all) * .
	sd SpillwayId+ := (all) + .
	sd Spillways := idle .
	sd Spillways! := (all) ! .
	sd Spillways* := (all) * .
	sd Spillways+ := (all) + .
	sd State := (((close1-C) ; (State-state)) | ((close2-1) ; (State-state)) | ((close3-2) ; (State-state)) | ((open1-2) ; (State-state)) | ((open2-3) ; (State-state)) | (openC-1) ; (State-state)) ; ((volume) ; (State-state)) .
	sd State! := (State-state) ; ((State) ; (((all) ; (State)) !)) .
	sd State* := (State-state) ; ((State) ; (((all) ; (State)) *)) .
	sd State+ := (State-state) ; ((State) ; (((all) ; (State)) +)) .
	sd State-state := (s2) ; ((s3) ; ((s4) ; (s5))) .
	sd TimeStamp := idle .
	sd TimeStamp! := (all) ! .
	sd TimeStamp* := (all) * .
	sd TimeStamp+ := (all) + .
	sd s2 := not(amatch {SC:Spillways ; V:Rat ; T:TimeStamp} s.t. V:Rat < 50000000 = false) .
	sd s3 := not(amatch {[S1:SpillwayId, O1:Aperture][S2:SpillwayId, O2:Aperture][S3:SpillwayId, O3:Aperture] ; V:Rat ; T:TimeStamp} s.t. V:Rat > 40000000 implies O1:Aperture == open3 and O2:Aperture =/= close and O3:Aperture =/= close or O2:Aperture == open3 and O1:Aperture =/= close and O3:Aperture =/= close or O3:Aperture == open3 and O1:Aperture =/= close and O2:Aperture =/= close = false) .
	sd s4 := not(amatch {SC:Spillways ; V:Rat ; T:TimeStamp} s.t. V:Rat < 10000000 implies openSpillways(SC:Spillways) == 0 = false) .
	sd s5 := not(amatch {SC:Spillways ; V:Rat ; T:TimeStamp} s.t. V:Rat >= 10000000 and V:Rat <= 40000000 implies openSpillways(SC:Spillways) == 2 = false) .
endsm
