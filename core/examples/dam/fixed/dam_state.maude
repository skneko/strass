mod DAM is
    protecting RAT . 

    sorts SpillwayId Aperture Spillway Spillways DamState TimeStamp .
    subsort Spillway < Spillways .
    subsort Nat < TimeStamp .
    sort State .

    ops s1 s2 s3 : -> SpillwayId [ctor] .
    ops close open1 open2 open3 : -> Aperture [ctor] .
    op `[_`,_`] : SpillwayId Aperture -> Spillway [ctor] .

    op empty : -> Spillways [ctor] . 
    op __ : Spillways Spillways -> Spillways [ctor assoc comm id: empty] .

    vars T T1 T2 : TimeStamp .

    op _ in [_`,_`] : TimeStamp TimeStamp TimeStamp -> Bool .
    eq T in [T1,T2] = T >= T1 and T <= T2 .

    op `{_;_;_;_`} : Spillways Rat TimeStamp Bool -> State .  

    var S : SpillwayId .
    vars O1 O2 O3 : Aperture .
    vars V V' H : Rat .
    var SC : Spillways .
    var B : Bool .
        
    rl [openC-1] : { [S,close] SC ; V ; T ; true } => { [S,open1] SC ; V ; T ; false } .
    rl [open1-2] : { [S,open1] SC ; V ; T ; true } => { [S,open2] SC ; V ; T ; false } .
    rl [open2-3] : { [S,open2] SC ; V ; T ; true } => { [S,open3] SC ; V ; T ; false } .

    rl [close1-C] : { [S, open1] SC ; V ; T ; true } => { [S,close] SC ; V ; T ; false } .
    rl [close2-1] : { [S, open2] SC ; V ; T ; true } => { [S,open1] SC ; V ; T ; false } .
    rl [close3-2] : { [S, open3] SC ; V ; T ; true } => { [S,open2] SC ; V ; T ; false } .

    rl [nocmd] : { SC ; V ; T ; true } => { SC ; V ; T ; false } . 

    op deltaT : -> TimeStamp .
    eq deltaT = 5 .

    op inflow : -> Rat . 
    eq inflow = 2000 .

    op aperture : Aperture -> Rat .
    eq aperture(close) = 0 .
    eq aperture(open1) = 200 .
    eq aperture(open2) = 400 .
    eq aperture(open3) = 1200 .

    var O : Aperture .  

    op outflow : Spillways -> Rat .
    eq outflow(empty) = 0 .
    eq outflow([S,O] SC) = aperture(O) + outflow(SC) .

    crl [volume] :  { SC ; V ; T ; false } => { SC ; V' ; (T + deltaT) ; true }  
                                            if V' := (V + inflow * deltaT) - (outflow(SC) * deltaT) .
endm

***(
	Generated by STRASS -- safe-tools.dsic.upv.es/strass
)

smod DAM-SAFE is
	protecting DAM .
	protecting EXT-BOOL .
	op openSpillways : Spillways -> Nat .
	eq openSpillways(empty) = 0 .
	eq openSpillways(SC:Spillways[S:SpillwayId, O:Aperture]) = if O:Aperture =/= close then 1 + openSpillways(SC:Spillways) else openSpillways(SC:Spillways) fi .
	strat Aperture! : @ Aperture .
	strat Aperture* : @ Aperture .
	strat Aperture+ : @ Aperture .
	strat Aperture-state : @ Aperture .
	strat DamState! : @ DamState .
	strat DamState* : @ DamState .
	strat DamState+ : @ DamState .
	strat DamState-state : @ DamState .
	strat SpillwayId! : @ SpillwayId .
	strat SpillwayId* : @ SpillwayId .
	strat SpillwayId+ : @ SpillwayId .
	strat SpillwayId-state : @ SpillwayId .
	strat Spillways! : @ Spillways .
	strat Spillways* : @ Spillways .
	strat Spillways+ : @ Spillways .
	strat Spillways-state : @ Spillways .
	strat State! : @ State .
	strat State* : @ State .
	strat State+ : @ State .
	strat State-state : @ State .
	strat TimeStamp! : @ TimeStamp .
	strat TimeStamp* : @ TimeStamp .
	strat TimeStamp+ : @ TimeStamp .
	strat TimeStamp-state : @ TimeStamp .
	strat s1 : @ State .
	strat s2 : @ State .
	strat s3 : @ State .
	strat s4 : @ State .
	sd Aperture! := (all) ! .
	sd Aperture* := (all) * .
	sd Aperture+ := (all) + .
	sd Aperture-state := idle .
	sd DamState! := (all) ! .
	sd DamState* := (all) * .
	sd DamState+ := (all) + .
	sd DamState-state := idle .
	sd SpillwayId! := (all) ! .
	sd SpillwayId* := (all) * .
	sd SpillwayId+ := (all) + .
	sd SpillwayId-state := idle .
	sd Spillways! := (all) ! .
	sd Spillways* := (all) * .
	sd Spillways+ := (all) + .
	sd Spillways-state := idle .
	sd State! := (State-state) ; (((all) ; (State-state)) !) .
	sd State* := (State-state) ; (((all) ; (State-state)) *) .
	sd State+ := (State-state) ; (((all) ; (State-state)) +) .
	sd State-state := (s1) ; ((s2) ; ((s3) ; (s4))) .
	sd TimeStamp! := (all) ! .
	sd TimeStamp* := (all) * .
	sd TimeStamp+ := (all) + .
	sd TimeStamp-state := idle .
	sd s1 := not(amatch {SC:Spillways ; V:Rat ; T:TimeStamp ; AC:Bool} s.t. V:Rat < 50000000 = false) .
	sd s2 := not(amatch {[S1:SpillwayId, O1:Aperture][S2:SpillwayId, O2:Aperture][S3:SpillwayId, O3:Aperture] ; V:Rat ; T:TimeStamp ; AC:Bool} s.t. V:Rat > 40000000 implies O1:Aperture == open3 and O2:Aperture =/= close and O3:Aperture =/= close or O2:Aperture == open3 and O1:Aperture =/= close and O3:Aperture =/= close or O3:Aperture == open3 and O1:Aperture =/= close and O2:Aperture =/= close = false) .
	sd s3 := not(amatch {SC:Spillways ; V:Rat ; T:TimeStamp ; AC:Bool} s.t. V:Rat < 10000000 implies openSpillways(SC:Spillways) == 0 = false) .
	sd s4 := not(amatch {SC:Spillways ; V:Rat ; T:TimeStamp ; AC:Bool} s.t. V:Rat >= 10000000 and V:Rat <= 40000000 implies openSpillways(SC:Spillways) == 2 = false) .
endsm
